/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  users: [],
  amount: 10,
  filteredUsers: [],
  status: 'idle',
  query: '',
  error: null,
};

export const fetchContacts = createAsyncThunk(
  'contact/fetchContacts',
  async (amount) => {
    const response = await axios.get(`https://randomuser.me/api/?results=${amount}`);
    return response.data.results;
  },
);

export const contactSlice = createSlice({
  name: 'contact',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    fetchMore: (state) => {
      state.amount += 50;
    },
    searchContact: (state, action) => {
      // search by name
      const query = action.payload.toLowerCase();
      if (query.length === 0) {
        state.filteredUsers = [];
      } else {
        state.filteredUsers = state.users.filter((person) => {
          const first = person.name.first.toLowerCase();
          const last = person.name.last.toLowerCase();
          return first.includes(query) || last.includes(query);
        });
      }
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [fetchContacts.pending]: (state) => {
      state.status = 'loading';
    },
    [fetchContacts.fulfilled]: (state, action) => {
      state.status = 'succeeded';
      // Add any fetched data to the array
      state.users = state.users.concat(action.payload);
    },
    [fetchContacts.rejected]: (state, action) => {
      state.status = 'failed';
      state.error = action.error.message;
    },
  },
});

export const { searchContact, fetchMore } = contactSlice.actions;

export const selectContacts = (state) => state.contact.users;
export const filterContacts = (state) => state.contact.filteredUsers;

export default contactSlice.reducer;
