import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
    users: [],
    amount:10,
    filteredUsers: [],
    status: 'idle',
    query:'',
    error: null,
    firstNameOrder: 'desc',
    lastNameOrder: 'desc',
};

export const fetchContacts = createAsyncThunk(
    'contact/fetchContacts',
    async (amount) => {
        const response = await axios.get(`https://randomuser.me/api/?results=${amount}`)
        return response.data.results;
    }
);

export const contactSlice = createSlice({
    name: 'contact',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        fetchMore: (state) => {
            state.amount = state.amount + 50;
        },
        searchContact: (state,action) => {
            //TODO: use full search later;
            //search by name
            let query = action.payload.toLowerCase();
            if(query.length === 0){
                state.filteredUsers = [];
            }else{
                state.filteredUsers = state.users.filter((person) => {
                    let first = person.name.first.toLowerCase();
                    let last = person.name.last.toLowerCase();
                    return first.includes(query) || last.includes(query);
                })
            }
        },
      
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: {
        [fetchContacts.pending]: (state, action) => {
          state.status = 'loading'
        },
        [fetchContacts.fulfilled]: (state, action) => {
          state.status = 'succeeded'
          // Add any fetched posts to the array
          state.users = state.users.concat(action.payload)
        },
        [fetchContacts.rejected]: (state, action) => {
          state.status = 'failed'
          state.error = action.error.message
        }
      }
  });
  
  export const { searchContact, fetchMore } = contactSlice.actions;
  
  // The function below is called a selector and allows us to select a value from
  // the state. Selectors can also be defined inline where they're used instead of
  // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
  export const selectContacts = (state) => state.contact.users;
  export const filterContacts = (state) => state.contact.filteredUsers;
  
  // We can also write thunks by hand, which may contain both sync and async logic.
  // Here's an example of conditionally dispatching actions based on current state.
//   export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };
  
  export default contactSlice.reducer;
