{"version":3,"sources":["redux/contactSlice.js","components/SearchBar.js","components/ContactItem.js","components/ContactList.js","components/Home.js","components/ContactDetail.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["fetchContacts","createAsyncThunk","amount","a","axios","get","response","data","results","contactSlice","createSlice","name","initialState","users","filteredUsers","status","query","error","reducers","fetchMore","state","searchContact","action","payload","toLowerCase","length","filter","person","first","last","includes","extraReducers","pending","fulfilled","concat","rejected","message","actions","selectContacts","contact","filterContacts","SearchBar","useState","searchInput","setSearchInput","dispatch","useDispatch","className","onChange","e","target","value","handleSearchInput","type","placeholder","ContacItem","history","useHistory","userName","onClick","push","alt","src","picture","large","ContactList","observer","useRef","contacts","useSelector","filteredContacts","useEffect","lastContactRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","map","i","ref","Home","ContactDetail","location","useLocation","title","cell","email","city","country","goBack","App","path","store","configureStore","reducer","contactReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6ee82bc.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst initialState = {\n  users: [],\n  amount: 10,\n  filteredUsers: [],\n  status: 'idle',\n  query: '',\n  error: null,\n};\n\nexport const fetchContacts = createAsyncThunk(\n  'contact/fetchContacts',\n  async (amount) => {\n    const response = await axios.get(`https://randomuser.me/api/?results=${amount}`);\n    return response.data.results;\n  },\n);\n\nexport const contactSlice = createSlice({\n  name: 'contact',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    fetchMore: (state) => {\n      state.amount += 50;\n    },\n    searchContact: (state, action) => {\n      // TODO: use full search later;\n      // search by name\n      const query = action.payload.toLowerCase();\n      if (query.length === 0) {\n        state.filteredUsers = [];\n      } else {\n        state.filteredUsers = state.users.filter((person) => {\n          const first = person.name.first.toLowerCase();\n          const last = person.name.last.toLowerCase();\n          return first.includes(query) || last.includes(query);\n        });\n      }\n    },\n\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: {\n    [fetchContacts.pending]: (state) => {\n      state.status = 'loading';\n    },\n    [fetchContacts.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      // Add any fetched posts to the array\n      state.users = state.users.concat(action.payload);\n    },\n    [fetchContacts.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport const { searchContact, fetchMore } = contactSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectContacts = (state) => state.contact.users;\nexport const filterContacts = (state) => state.contact.filteredUsers;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n//   export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//     const currentValue = selectCount(getState());\n//     if (currentValue % 2 === 1) {\n//       dispatch(incrementByAmount(amount));\n//     }\n//   };\n\nexport default contactSlice.reducer;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { searchContact } from '../redux/contactSlice';\n\nfunction SearchBar() {\n  const [searchInput, setSearchInput] = useState('');\n  const dispatch = useDispatch();\n  const handleSearchInput = (e) => {\n    setSearchInput(e.target.value);\n    dispatch(searchContact(e.target.value));\n  };\n  return (\n    <div className=\"searchContainer\">\n      <input\n        onChange={(e) => handleSearchInput(e)}\n        value={searchInput}\n        className=\"search\"\n        type=\"search\"\n        placeholder=\"Search...\"\n      />\n    </div>\n  );\n}\nexport default SearchBar;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable react/require-default-props */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport PropTypes from 'prop-types';\n\nimport { useHistory } from 'react-router-dom';\n\nfunction ContacItem({ contact }) {\n  const history = useHistory();\n  const userName = contact.name.first + contact.name.last;\n  const handleRedirect = () => {\n    history.push(`/${userName}`, [contact]);\n  };\n  return (\n    <div\n      className=\"contactContainer\"\n      onClick={handleRedirect}\n    >\n      <img\n        className=\"avatar\"\n        alt={contact.name.first}\n        src={contact.picture.large}\n      />\n      <div className=\"contactDetail\">\n        <div className=\"contactName\">\n          {`${contact.name.first} ${contact.name.last}`}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nContacItem.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  contact: PropTypes.object,\n};\n\nexport default ContacItem;\n","import React, { useEffect, useRef, useCallback } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContacItem from './ContactItem';\n\nimport {\n  selectContacts,\n  fetchContacts,\n  filterContacts,\n} from '../redux/contactSlice';\n\nfunction ContactList() {\n  const observer = useRef();\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filteredContacts = useSelector(filterContacts);\n  const status = useSelector((state) => state.contact.status);\n  const error = useSelector((state) => state.contact.error);\n  const amount = useSelector((state) => state.contact.amount);\n\n  useEffect(() => {\n    if (status === 'idle') {\n      dispatch(fetchContacts(amount));\n    }\n  }, [status, dispatch, amount]);\n\n  const lastContactRef = useCallback((node) => {\n    if (status === 'loading') return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver((entries) => {\n      if (entries[0].isIntersecting) {\n        dispatch(fetchContacts(amount));\n      }\n    }, []);\n    if (node) observer.current.observe(node);\n  });\n\n  return (\n    <div className=\"listContainer\">\n\n      {\n                filteredContacts.length > 0 ? filteredContacts.map((person, i) => (\n                  <div className=\"wrapper\" key={i}>\n                    <ContacItem key={i} contact={person} />\n                  </div>\n                ))\n                  : (\n                    <>\n                      {\n                        contacts.map((person, i) => {\n                          if (i === contacts.length - 1) {\n                            return <div className=\"wrapper\" ref={lastContactRef} key={i}><ContacItem contact={person} /></div>;\n                          }\n                          return <div className=\"wrapper\" key={i}><ContacItem key={i} contact={person} /></div>;\n                        })\n                    }\n                    </>\n                  )\n            }\n      <div>{status === 'loading' && 'Loading...'}</div>\n      <div>{error && 'Error'}</div>\n\n    </div>\n  );\n}\n\nexport default ContactList;\n","import React from 'react';\n\nimport SearchBar from './SearchBar';\nimport ContacList from './ContactList';\n\nfunction Home() {\n  return (\n    <div className=\"homeContainer\">\n      <SearchBar />\n      <ContacList />\n    </div>\n  );\n}\n\nexport default Home;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\n\nimport {\n  useLocation,\n  useHistory,\n} from 'react-router-dom';\n\nfunction ContactDetail() {\n  const location = useLocation();\n  const history = useHistory();\n  const contact = location.state && location.state.length > 0 ? location.state[0] : null;\n  return (\n    <div className=\"detailContainer\">\n      {\n                contact ? (\n                  <div className=\"cardContainer\">\n                    <div className=\"cardImage\">\n                      <img\n                        src={`${contact.picture.large}`}\n                        alt={`${contact.name.first} ${(contact.name.last)}`}\n                        className=\"avatar\"\n                      />\n                    </div>\n                    <div className=\"cardText\">\n                      <h4>\n                        {`${contact.name.title}. ${contact.name.first} ${contact.name.last}`}\n                      </h4>\n                      <p>\n                        <label>Cell: </label>\n                        {contact.cell}\n                        <br />\n                        <label>Email: </label>\n                        {contact.email}\n                      </p>\n                      <div className=\"location\">\n                        <div>\n                          {`${contact.location.city}, ${contact.location.state}`}\n                        </div>\n                        <div>\n                          {`${contact.location.country}`}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"cardButton\">\n                      <button type=\"button\" onClick={history.goBack}>\n                        Back to Main Page\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <p>This contact doesn not exist. </p>\n                  </div>\n                )\n        }\n    </div>\n\n  );\n}\n\nexport default ContactDetail;\n","import React from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport Home from './components/Home';\nimport ContactDetail from './components/ContactDetail';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/:userName\">\n            <ContactDetail />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/* eslint-disable import/prefer-default-export */\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport contactReducer from './contactSlice';\n\nexport const store = configureStore({\n  reducer: {\n    contact: contactReducer,\n  },\n});\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport { store } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}